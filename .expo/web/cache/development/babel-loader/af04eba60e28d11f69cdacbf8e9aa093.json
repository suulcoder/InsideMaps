{"ast":null,"code":"\"use strict\";\n\nfunction setup(env) {\n  createDebug.debug = createDebug;\n  createDebug[\"default\"] = createDebug;\n  createDebug.coerce = coerce;\n  createDebug.disable = disable;\n  createDebug.enable = enable;\n  createDebug.enabled = enabled;\n  createDebug.humanize = require('ms');\n  Object.keys(env).forEach(function (key) {\n    createDebug[key] = env[key];\n  });\n  createDebug.instances = [];\n  createDebug.names = [];\n  createDebug.skips = [];\n  createDebug.formatters = {};\n\n  function selectColor(namespace) {\n    var hash = 0;\n\n    for (var i = 0; i < namespace.length; i++) {\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\n      hash |= 0;\n    }\n\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n  }\n\n  createDebug.selectColor = selectColor;\n\n  function createDebug(namespace) {\n    var prevTime;\n\n    function debug() {\n      if (!debug.enabled) {\n        return;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var self = debug;\n      var curr = Number(new Date());\n      var ms = curr - (prevTime || curr);\n      self.diff = ms;\n      self.prev = prevTime;\n      self.curr = curr;\n      prevTime = curr;\n      args[0] = createDebug.coerce(args[0]);\n\n      if (typeof args[0] !== 'string') {\n        args.unshift('%O');\n      }\n\n      var index = 0;\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n        if (match === '%%') {\n          return match;\n        }\n\n        index++;\n        var formatter = createDebug.formatters[format];\n\n        if (typeof formatter === 'function') {\n          var val = args[index];\n          match = formatter.call(self, val);\n          args.splice(index, 1);\n          index--;\n        }\n\n        return match;\n      });\n      createDebug.formatArgs.call(self, args);\n      var logFn = self.log || createDebug.log;\n      logFn.apply(self, args);\n    }\n\n    debug.namespace = namespace;\n    debug.enabled = createDebug.enabled(namespace);\n    debug.useColors = createDebug.useColors();\n    debug.color = selectColor(namespace);\n    debug.destroy = destroy;\n    debug.extend = extend;\n\n    if (typeof createDebug.init === 'function') {\n      createDebug.init(debug);\n    }\n\n    createDebug.instances.push(debug);\n    return debug;\n  }\n\n  function destroy() {\n    var index = createDebug.instances.indexOf(this);\n\n    if (index !== -1) {\n      createDebug.instances.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  function extend(namespace, delimiter) {\n    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n  }\n\n  function enable(namespaces) {\n    createDebug.save(namespaces);\n    createDebug.names = [];\n    createDebug.skips = [];\n    var i;\n    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n    var len = split.length;\n\n    for (i = 0; i < len; i++) {\n      if (!split[i]) {\n        continue;\n      }\n\n      namespaces = split[i].replace(/\\*/g, '.*?');\n\n      if (namespaces[0] === '-') {\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n      } else {\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\n      }\n    }\n\n    for (i = 0; i < createDebug.instances.length; i++) {\n      var instance = createDebug.instances[i];\n      instance.enabled = createDebug.enabled(instance.namespace);\n    }\n  }\n\n  function disable() {\n    createDebug.enable('');\n  }\n\n  function enabled(name) {\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    var i;\n    var len;\n\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\n      if (createDebug.skips[i].test(name)) {\n        return false;\n      }\n    }\n\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\n      if (createDebug.names[i].test(name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function coerce(val) {\n    if (val instanceof Error) {\n      return val.stack || val.message;\n    }\n\n    return val;\n  }\n\n  createDebug.enable(createDebug.load());\n  return createDebug;\n}\n\nmodule.exports = setup;","map":{"version":3,"sources":["/usr/lib/node_modules/expo-cli/node_modules/sockjs-client/node_modules/debug/src/common.js"],"names":["setup","env","createDebug","debug","coerce","disable","enable","enabled","humanize","require","Object","keys","forEach","key","instances","names","skips","formatters","selectColor","namespace","hash","i","length","charCodeAt","colors","Math","abs","prevTime","_len","arguments","args","Array","_key","self","curr","Number","Date","ms","diff","prev","unshift","index","replace","match","format","formatter","val","call","splice","formatArgs","logFn","log","apply","useColors","color","destroy","extend","init","push","indexOf","delimiter","namespaces","save","split","len","RegExp","substr","instance","name","test","Error","stack","message","load","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\nfunction setup(env) {\n  createDebug.debug = createDebug;\n  createDebug.default = createDebug;\n  createDebug.coerce = coerce;\n  createDebug.disable = disable;\n  createDebug.enable = enable;\n  createDebug.enabled = enabled;\n  createDebug.humanize = require('ms');\n  Object.keys(env).forEach(function (key) {\n    createDebug[key] = env[key];\n  });\n  /**\n  * Active `debug` instances.\n  */\n\n  createDebug.instances = [];\n  /**\n  * The currently active debug mode names, and names to skip.\n  */\n\n  createDebug.names = [];\n  createDebug.skips = [];\n  /**\n  * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n  *\n  * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n  */\n\n  createDebug.formatters = {};\n  /**\n  * Selects a color for a debug namespace\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\n  * @return {Number|String} An ANSI color code for the given namespace\n  * @api private\n  */\n\n  function selectColor(namespace) {\n    var hash = 0;\n\n    for (var i = 0; i < namespace.length; i++) {\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n  }\n\n  createDebug.selectColor = selectColor;\n  /**\n  * Create a debugger with the given `namespace`.\n  *\n  * @param {String} namespace\n  * @return {Function}\n  * @api public\n  */\n\n  function createDebug(namespace) {\n    var prevTime;\n\n    function debug() {\n      // Disabled?\n      if (!debug.enabled) {\n        return;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var self = debug; // Set `diff` timestamp\n\n      var curr = Number(new Date());\n      var ms = curr - (prevTime || curr);\n      self.diff = ms;\n      self.prev = prevTime;\n      self.curr = curr;\n      prevTime = curr;\n      args[0] = createDebug.coerce(args[0]);\n\n      if (typeof args[0] !== 'string') {\n        // Anything else let's inspect with %O\n        args.unshift('%O');\n      } // Apply any `formatters` transformations\n\n\n      var index = 0;\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n        // If we encounter an escaped % then don't increase the array index\n        if (match === '%%') {\n          return match;\n        }\n\n        index++;\n        var formatter = createDebug.formatters[format];\n\n        if (typeof formatter === 'function') {\n          var val = args[index];\n          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n          args.splice(index, 1);\n          index--;\n        }\n\n        return match;\n      }); // Apply env-specific formatting (colors, etc.)\n\n      createDebug.formatArgs.call(self, args);\n      var logFn = self.log || createDebug.log;\n      logFn.apply(self, args);\n    }\n\n    debug.namespace = namespace;\n    debug.enabled = createDebug.enabled(namespace);\n    debug.useColors = createDebug.useColors();\n    debug.color = selectColor(namespace);\n    debug.destroy = destroy;\n    debug.extend = extend; // Debug.formatArgs = formatArgs;\n    // debug.rawLog = rawLog;\n    // env-specific initialization logic for debug instances\n\n    if (typeof createDebug.init === 'function') {\n      createDebug.init(debug);\n    }\n\n    createDebug.instances.push(debug);\n    return debug;\n  }\n\n  function destroy() {\n    var index = createDebug.instances.indexOf(this);\n\n    if (index !== -1) {\n      createDebug.instances.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  function extend(namespace, delimiter) {\n    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n  }\n  /**\n  * Enables a debug mode by namespaces. This can include modes\n  * separated by a colon and wildcards.\n  *\n  * @param {String} namespaces\n  * @api public\n  */\n\n\n  function enable(namespaces) {\n    createDebug.save(namespaces);\n    createDebug.names = [];\n    createDebug.skips = [];\n    var i;\n    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n    var len = split.length;\n\n    for (i = 0; i < len; i++) {\n      if (!split[i]) {\n        // ignore empty strings\n        continue;\n      }\n\n      namespaces = split[i].replace(/\\*/g, '.*?');\n\n      if (namespaces[0] === '-') {\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n      } else {\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\n      }\n    }\n\n    for (i = 0; i < createDebug.instances.length; i++) {\n      var instance = createDebug.instances[i];\n      instance.enabled = createDebug.enabled(instance.namespace);\n    }\n  }\n  /**\n  * Disable debug output.\n  *\n  * @api public\n  */\n\n\n  function disable() {\n    createDebug.enable('');\n  }\n  /**\n  * Returns true if the given mode name is enabled, false otherwise.\n  *\n  * @param {String} name\n  * @return {Boolean}\n  * @api public\n  */\n\n\n  function enabled(name) {\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    var i;\n    var len;\n\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\n      if (createDebug.skips[i].test(name)) {\n        return false;\n      }\n    }\n\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\n      if (createDebug.names[i].test(name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n  * Coerce `val`.\n  *\n  * @param {Mixed} val\n  * @return {Mixed}\n  * @api private\n  */\n\n\n  function coerce(val) {\n    if (val instanceof Error) {\n      return val.stack || val.message;\n    }\n\n    return val;\n  }\n\n  createDebug.enable(createDebug.load());\n  return createDebug;\n}\n\nmodule.exports = setup;\n\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import * as types from \"../types/map\";\nimport { ShadowPropTypesIOS } from \"react-native-web/dist/index\";\nexport var startCreatingMap = function startCreatingMap(map) {\n  return {\n    type: types.CREATE_MAP_STARTED,\n    payload: map\n  };\n};\nexport var completeCreatingMap = function completeCreatingMap(oldId, map) {\n  return {\n    type: types.CREATE_MAP_COMPLETED,\n    payload: {\n      oldId: oldId,\n      map: map\n    }\n  };\n};\nexport var failCreatingMap = function failCreatingMap(oldId, error) {\n  return {\n    type: types.CREATE_MAP_FAILED,\n    payload: {\n      oldId: oldId,\n      error: error\n    }\n  };\n};\nexport var startFetchingMap = function startFetchingMap() {\n  return {\n    type: types.FETCH_MAP_STARTED\n  };\n};\nexport var failFetchingMap = function failFetchingMap(error) {\n  return {\n    type: types.FETCH_MAP_FAILED,\n    payload: {\n      error: error\n    }\n  };\n};\nexport var completeFetchingMap = function completeFetchingMap(entities, order) {\n  return {\n    type: types.FETCH_MAP_COMPLETED,\n    payload: {\n      entities: entities,\n      order: order\n    }\n  };\n};\nexport var startRemovingMap = function startRemovingMap(id) {\n  return {\n    type: types.REMOVE_MAP_STARTED,\n    payload: {\n      id: id\n    }\n  };\n};\nexport var completeRemovingMap = function completeRemovingMap() {\n  return {\n    type: types.REMOVE_MAP_COMPLETED\n  };\n};\nexport var failRemovingMap = function failRemovingMap(id, error) {\n  return {\n    type: types.REMOVE_MAP_FAILED,\n    payload: {\n      id: id,\n      error: error\n    }\n  };\n};","map":{"version":3,"sources":["/home/roberto/Desktop/UVG 2020/INGENIERIA/InsideMaps/src/actions/map.js"],"names":["types","ShadowPropTypesIOS","startCreatingMap","map","type","CREATE_MAP_STARTED","payload","completeCreatingMap","oldId","CREATE_MAP_COMPLETED","failCreatingMap","error","CREATE_MAP_FAILED","startFetchingMap","FETCH_MAP_STARTED","failFetchingMap","FETCH_MAP_FAILED","completeFetchingMap","entities","order","FETCH_MAP_COMPLETED","startRemovingMap","id","REMOVE_MAP_STARTED","completeRemovingMap","REMOVE_MAP_COMPLETED","failRemovingMap","REMOVE_MAP_FAILED"],"mappings":"AAAA,OAAO,KAAKA,KAAZ;SACSC,kB;AAET,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,GAAG;AAAA,SAAK;AACtCC,IAAAA,IAAI,EAAEJ,KAAK,CAACK,kBAD0B;AAEtCC,IAAAA,OAAO,EAAEH;AAF6B,GAAL;AAAA,CAA5B;AAKP,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAQL,GAAR;AAAA,SAAiB;AAClDC,IAAAA,IAAI,EAAEJ,KAAK,CAACS,oBADsC;AAElDH,IAAAA,OAAO,EAAE;AACPE,MAAAA,KAAK,EAALA,KADO;AAEPL,MAAAA,GAAG,EAAHA;AAFO;AAFyC,GAAjB;AAAA,CAA5B;AAQP,OAAO,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACF,KAAD,EAAQG,KAAR;AAAA,SAAmB;AAChDP,IAAAA,IAAI,EAAEJ,KAAK,CAACY,iBADoC;AAEhDN,IAAAA,OAAO,EAAE;AACPE,MAAAA,KAAK,EAALA,KADO;AAEPG,MAAAA,KAAK,EAALA;AAFO;AAFuC,GAAnB;AAAA,CAAxB;AAQP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAO;AACrCT,IAAAA,IAAI,EAAEJ,KAAK,CAACc;AADyB,GAAP;AAAA,CAAzB;AAIP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAJ,KAAK;AAAA,SAAK;AACvCP,IAAAA,IAAI,EAAEJ,KAAK,CAACgB,gBAD2B;AAEvCV,IAAAA,OAAO,EAAE;AACPK,MAAAA,KAAK,EAALA;AADO;AAF8B,GAAL;AAAA,CAA7B;AAQP,OAAO,IAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,QAAD,EAAWC,KAAX;AAAA,SAAsB;AACvDf,IAAAA,IAAI,EAAEJ,KAAK,CAACoB,mBAD2C;AAEvDd,IAAAA,OAAO,EAAE;AACPY,MAAAA,QAAQ,EAARA,QADO;AAEPC,MAAAA,KAAK,EAALA;AAFO;AAF8C,GAAtB;AAAA,CAA5B;AAQP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,EAAE;AAAA,SAAK;AACrClB,IAAAA,IAAI,EAAEJ,KAAK,CAACuB,kBADyB;AAErCjB,IAAAA,OAAO,EAAE;AACPgB,MAAAA,EAAE,EAAFA;AADO;AAF4B,GAAL;AAAA,CAA3B;AAOP,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SAAO;AACxCpB,IAAAA,IAAI,EAAEJ,KAAK,CAACyB;AAD4B,GAAP;AAAA,CAA5B;AAIP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACJ,EAAD,EAAKX,KAAL;AAAA,SAAgB;AAC7CP,IAAAA,IAAI,EAAEJ,KAAK,CAAC2B,iBADiC;AAE7CrB,IAAAA,OAAO,EAAE;AACPgB,MAAAA,EAAE,EAAFA,EADO;AAEPX,MAAAA,KAAK,EAALA;AAFO;AAFoC,GAAhB;AAAA,CAAxB","sourcesContent":["import * as types from '../types/map';\nimport { ShadowPropTypesIOS } from 'react-native';\n\nexport const startCreatingMap = map => ({ //map es un diccionario con todo lo que se debe agregar para crear un nuevo mapa\n  type: types.CREATE_MAP_STARTED,\n  payload: map,\n});\n\nexport const completeCreatingMap = (oldId, map) => ({ //igual este map es un dict y contiene un verdadero mapa (no es fachada)\n  type: types.CREATE_MAP_COMPLETED,\n  payload: {\n    oldId,\n    map,\n  },\n});\n\nexport const failCreatingMap = (oldId, error) => ({\n  type: types.CREATE_MAP_FAILED,\n  payload: {\n    oldId,\n    error,\n  },\n});\n\nexport const startFetchingMap = () => ({\n  type: types.FETCH_MAP_STARTED,\n});\n\nexport const failFetchingMap = error => ({\n  type: types.FETCH_MAP_FAILED,\n  payload: {\n    error,\n  },\n});\n\n\nexport const completeFetchingMap = (entities, order) => ({\n  type: types.FETCH_MAP_COMPLETED,\n  payload: {\n    entities,\n    order\n  },\n});\n\nexport const startRemovingMap = id => ({\n  type: types.REMOVE_MAP_STARTED,\n  payload: {\n    id\n  },\n});\n\nexport const completeRemovingMap = () => ({\n  type: types.REMOVE_MAP_COMPLETED,\n});\n\nexport const failRemovingMap = (id, error) => ({\n  type: types.REMOVE_MAP_FAILED,\n  payload: {\n    id,\n    error,\n  },\n});\n\n"]},"metadata":{},"sourceType":"module"}
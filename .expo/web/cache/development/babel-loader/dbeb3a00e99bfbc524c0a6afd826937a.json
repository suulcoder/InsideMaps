{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/thecoder/Documentos/UVG/Software/InsideMaps/src/components/Login/index.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport styles from \"./styles\";\nimport { getError, getIsLogging, getIsSigning } from \"../../reducers\";\nimport * as actions from \"../../actions/auth\";\nimport { validateEmail } from \"../../modules/validate\";\nimport Spinner from \"../spinner\";\n\nvar Login = function Login(_ref) {\n  var _React$createElement;\n\n  var Message = _ref.Message,\n      onSubmit = _ref.onSubmit,\n      loginSatus = _ref.loginSatus;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      changeEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      changePassword = _useState4[1];\n\n  return React.createElement(View, {\n    style: styles.section,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.login,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, (_React$createElement = {\n    style: styles.user,\n    className: \"user\",\n    type: \"text\",\n    placeholder: \"email\",\n    value: email\n  }, _defineProperty(_React$createElement, \"value\", email), _defineProperty(_React$createElement, \"keyboardType\", 'email-address'), _defineProperty(_React$createElement, \"onChangeText\", changeEmail), _defineProperty(_React$createElement, \"onChange\", function onChange(e) {\n    return changeEmail(e.target.value);\n  }), _defineProperty(_React$createElement, \"__source\", {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 17\n  }), _React$createElement)), React.createElement(TextInput, {\n    style: styles.password,\n    className: \"password\",\n    type: \"password\",\n    secureTextEntry: true,\n    placeholder: \"password\",\n    value: password,\n    onChangeText: changePassword,\n    onChange: function onChange(e) {\n      return changePassword(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }), loginSatus ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 35\n    }\n  }) : React.createElement(View, {\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, React.createElement(Button, {\n    className: \"login_button\",\n    color: \"#540A08\",\n    title: 'LOGIN',\n    type: \"submit\",\n    onPress: function onPress() {\n      return onSubmit(email, password);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }\n  }))), React.createElement(Text, {\n    style: styles.errorText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, Message), React.createElement(View, {\n    style: styles.sectionText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, \"Scroll Down \\u2193\")));\n};\n\nexport default connect(function (state) {\n  return {\n    Message: getIsLogging(state) !== null ? getIsLogging(state) ? 'LOADING...' : getError(state) : undefined,\n    loginSatus: getIsLogging(state)\n  };\n}, function (dispatch) {\n  return {\n    onSubmit: function onSubmit(email, password) {\n      if (email && password) {\n        if (validateEmail(email)) {\n          dispatch(actions.startLogin(email, password));\n        } else {\n          dispatch(actions.failLogin('WRITE A VALID EMAIL', 0));\n        }\n      } else if (!email) {\n        dispatch(actions.failLogin('EMAIL FIELD MUST NOT BE EMPTY', 0));\n      } else if (!password) {\n        dispatch(actions.failLogin('PASSWORD FIELD MUST NOT BE EMPTY', 0));\n      }\n    }\n  };\n})(Login);","map":{"version":3,"sources":["/home/thecoder/Documentos/UVG/Software/InsideMaps/src/components/Login/index.js"],"names":["React","useState","connect","styles","getError","getIsLogging","getIsSigning","actions","validateEmail","Spinner","Login","Message","onSubmit","loginSatus","email","changeEmail","password","changePassword","section","login","user","e","target","value","button","errorText","sectionText","text","state","undefined","dispatch","startLogin","failLogin"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { connect } from 'react-redux';\nimport { View, TextInput, Button, Text } from \"react-native\";\nimport styles from './styles'\nimport { getError, getIsLogging, getIsSigning } from '../../reducers'\nimport * as actions from '../../actions/auth'\nimport { validateEmail } from  '../../modules/validate'\nimport  Spinner  from '../spinner';\n\nconst Login = ({Message ,onSubmit, loginSatus}) => {\n    const [email,changeEmail] = useState('')\n    const [password,changePassword] = useState('')\n    return (\n        <View style={styles.section}>\n            <View style={styles.login}>\n                <TextInput\n                style={styles.user}\n                className=\"user\"\n                type=\"text\"\n                placeholder=\"email\"\n                value={email}\n                value={email}\n                keyboardType={'email-address'}    \n                onChangeText={changeEmail}\n                onChange={e => changeEmail(e.target.value)}\n                />\n                <TextInput\n                    style={styles.password}\n                    className=\"password\"\n                    type=\"password\"\n                    secureTextEntry={true}\n                    placeholder=\"password\"\n                    value={password}\n                    onChangeText={changePassword}\n                    onChange={e=>changePassword(e.target.value)}\n                />\n                   { loginSatus ? <Spinner />:\n                    <View style={styles.button}>\n                        <Button className=\"login_button\" color='#540A08'  title={'LOGIN'} type=\"submit\" onPress={\n                            () => onSubmit(email,password)\n                        }/>\n                    </View>\n                }\n            </View>\n            <Text style={styles.errorText}>{Message}</Text>\n            <View style={styles.sectionText}>\n                <Text style={styles.text}>Scroll Down ↓</Text>\n            </View>\n        </View>\n    )\n}\n\nexport default connect(\n    state => ({\n        Message: (getIsLogging(state)!==null)?\n            ((getIsLogging(state))?\n                ('LOADING...'):\n                (getError(state))):\n            (undefined) ,\n        loginSatus: getIsLogging(state)\n    }),\n    dispatch => ({\n        onSubmit(email,password){\n            if(email && password){\n                if(validateEmail(email)){\n                    dispatch(actions.startLogin(email,password))\n                }\n                else{\n                    dispatch(actions.failLogin('WRITE A VALID EMAIL',0))\n                }\n                \n            }    \n            else if(!email){\n                dispatch(actions.failLogin('EMAIL FIELD MUST NOT BE EMPTY',0))\n            }\n            else if(!password){\n                dispatch(actions.failLogin('PASSWORD FIELD MUST NOT BE EMPTY',0))\n            }\n        }\n    })\n)(Login)\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nvar utils = require(\"./utils\");\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\nvar defaults = {\n  allowDots: false,\n  allowPrototypes: false,\n  arrayLimit: 20,\n  charset: 'utf-8',\n  charsetSentinel: false,\n  comma: false,\n  decoder: utils.decode,\n  delimiter: '&',\n  depth: 5,\n  ignoreQueryPrefix: false,\n  interpretNumericEntities: false,\n  parameterLimit: 1000,\n  parseArrays: true,\n  plainObjects: false,\n  strictNullHandling: false\n};\n\nvar interpretNumericEntities = function interpretNumericEntities(str) {\n  return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n    return String.fromCharCode(parseInt(numberStr, 10));\n  });\n};\n\nvar parseArrayValue = function parseArrayValue(val, options) {\n  if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n    return val.split(',');\n  }\n\n  return val;\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n  if (isArray(val)) {\n    var mapped = [];\n\n    for (var i = 0; i < val.length; i += 1) {\n      mapped.push(fn(val[i]));\n    }\n\n    return mapped;\n  }\n\n  return fn(val);\n};\n\nvar isoSentinel = 'utf8=%26%2310003%3B';\nvar charsetSentinel = 'utf8=%E2%9C%93';\n\nvar parseValues = function parseQueryStringValues(str, options) {\n  var obj = {};\n  var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n  var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n  var parts = cleanStr.split(options.delimiter, limit);\n  var skipIndex = -1;\n  var i;\n  var charset = options.charset;\n\n  if (options.charsetSentinel) {\n    for (i = 0; i < parts.length; ++i) {\n      if (parts[i].indexOf('utf8=') === 0) {\n        if (parts[i] === charsetSentinel) {\n          charset = 'utf-8';\n        } else if (parts[i] === isoSentinel) {\n          charset = 'iso-8859-1';\n        }\n\n        skipIndex = i;\n        i = parts.length;\n      }\n    }\n  }\n\n  for (i = 0; i < parts.length; ++i) {\n    if (i === skipIndex) {\n      continue;\n    }\n\n    var part = parts[i];\n    var bracketEqualsPos = part.indexOf(']=');\n    var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n    var key, val;\n\n    if (pos === -1) {\n      key = options.decoder(part, defaults.decoder, charset, 'key');\n      val = options.strictNullHandling ? null : '';\n    } else {\n      key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n      val = maybeMap(parseArrayValue(part.slice(pos + 1), options), function (encodedVal) {\n        return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n      });\n    }\n\n    if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n      val = interpretNumericEntities(val);\n    }\n\n    if (part.indexOf('[]=') > -1) {\n      val = isArray(val) ? [val] : val;\n    }\n\n    if (has.call(obj, key)) {\n      obj[key] = utils.combine(obj[key], val);\n    } else {\n      obj[key] = val;\n    }\n  }\n\n  return obj;\n};\n\nvar parseObject = function parseObject(chain, val, options, valuesParsed) {\n  var leaf = valuesParsed ? val : parseArrayValue(val, options);\n\n  for (var i = chain.length - 1; i >= 0; --i) {\n    var obj;\n    var root = chain[i];\n\n    if (root === '[]' && options.parseArrays) {\n      obj = [].concat(leaf);\n    } else {\n      obj = options.plainObjects ? Object.create(null) : {};\n      var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n      var index = parseInt(cleanRoot, 10);\n\n      if (!options.parseArrays && cleanRoot === '') {\n        obj = {\n          0: leaf\n        };\n      } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {\n        obj = [];\n        obj[index] = leaf;\n      } else {\n        obj[cleanRoot] = leaf;\n      }\n    }\n\n    leaf = obj;\n  }\n\n  return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n  if (!givenKey) {\n    return;\n  }\n\n  var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n  var brackets = /(\\[[^[\\]]*])/;\n  var child = /(\\[[^[\\]]*])/g;\n  var segment = options.depth > 0 && brackets.exec(key);\n  var parent = segment ? key.slice(0, segment.index) : key;\n  var keys = [];\n\n  if (parent) {\n    if (!options.plainObjects && has.call(Object.prototype, parent)) {\n      if (!options.allowPrototypes) {\n        return;\n      }\n    }\n\n    keys.push(parent);\n  }\n\n  var i = 0;\n\n  while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n    i += 1;\n\n    if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n      if (!options.allowPrototypes) {\n        return;\n      }\n    }\n\n    keys.push(segment[1]);\n  }\n\n  if (segment) {\n    keys.push('[' + key.slice(segment.index) + ']');\n  }\n\n  return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n  if (!opts) {\n    return defaults;\n  }\n\n  if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {\n    throw new TypeError('Decoder has to be a function.');\n  }\n\n  if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n  }\n\n  var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n  return {\n    allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n    allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n    arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n    charset: charset,\n    charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n    comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n    decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n    delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n    depth: typeof opts.depth === 'number' || opts.depth === false ? +opts.depth : defaults.depth,\n    ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n    interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n    parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n    parseArrays: opts.parseArrays !== false,\n    plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n    strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n  };\n};\n\nmodule.exports = function (str, opts) {\n  var options = normalizeParseOptions(opts);\n\n  if (str === '' || str === null || typeof str === 'undefined') {\n    return options.plainObjects ? Object.create(null) : {};\n  }\n\n  var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n  var obj = options.plainObjects ? Object.create(null) : {};\n  var keys = Object.keys(tempObj);\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n    obj = utils.merge(obj, newObj, options);\n  }\n\n  return utils.compact(obj);\n};","map":{"version":3,"sources":["/home/thecoder/Documentos/UVG/Software/InsideMaps/node_modules/expo/node_modules/qs/lib/parse.js"],"names":["utils","require","has","Object","prototype","hasOwnProperty","isArray","Array","defaults","allowDots","allowPrototypes","arrayLimit","charset","charsetSentinel","comma","decoder","decode","delimiter","depth","ignoreQueryPrefix","interpretNumericEntities","parameterLimit","parseArrays","plainObjects","strictNullHandling","str","replace","$0","numberStr","String","fromCharCode","parseInt","parseArrayValue","val","options","indexOf","split","maybeMap","fn","mapped","i","length","push","isoSentinel","parseValues","parseQueryStringValues","obj","cleanStr","limit","Infinity","undefined","parts","skipIndex","part","bracketEqualsPos","pos","key","slice","encodedVal","call","combine","parseObject","chain","valuesParsed","leaf","root","concat","create","cleanRoot","charAt","index","isNaN","parseKeys","parseQueryStringKeys","givenKey","brackets","child","segment","exec","parent","keys","normalizeParseOptions","opts","TypeError","isRegExp","module","exports","tempObj","newObj","merge","compact"],"mappings":"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","sourcesContent":["'use strict';\n\nvar utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar defaults = {\n    allowDots: false,\n    allowPrototypes: false,\n    arrayLimit: 20,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    comma: false,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictNullHandling: false\n};\n\nvar interpretNumericEntities = function (str) {\n    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\n\nvar parseArrayValue = function (val, options) {\n    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n        return val.split(',');\n    }\n\n    return val;\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for (var i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\n\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = {};\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for (i = 0; i < parts.length; ++i) {\n            if (parts[i].indexOf('utf8=') === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = 'utf-8';\n                } else if (parts[i] === isoSentinel) {\n                    charset = 'iso-8859-1';\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n\n    for (i = 0; i < parts.length; ++i) {\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, 'key');\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n            val = maybeMap(\n                parseArrayValue(part.slice(pos + 1), options),\n                function (encodedVal) {\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n                }\n            );\n        }\n\n        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n            val = interpretNumericEntities(val);\n        }\n\n        if (part.indexOf('[]=') > -1) {\n            val = isArray(val) ? [val] : val;\n        }\n\n        if (has.call(obj, key)) {\n            obj[key] = utils.combine(obj[key], val);\n        } else {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options, valuesParsed) {\n    var leaf = valuesParsed ? val : parseArrayValue(val, options);\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]' && options.parseArrays) {\n            obj = [].concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var index = parseInt(cleanRoot, 10);\n            if (!options.parseArrays && cleanRoot === '') {\n                obj = { 0: leaf };\n            } else if (\n                !isNaN(index)\n                && root !== cleanRoot\n                && String(index) === cleanRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else {\n                obj[cleanRoot] = leaf;\n            }\n        }\n\n        leaf = obj; // eslint-disable-line no-param-reassign\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n    return {\n        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (str, opts) {\n    var options = normalizeParseOptions(opts);\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    return utils.compact(obj);\n};\n"]},"metadata":{},"sourceType":"script"}
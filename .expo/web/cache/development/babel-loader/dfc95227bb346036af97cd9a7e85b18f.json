{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\GitHub\\\\InsideMaps\\\\src\\\\components\\\\Login\\\\index.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport styles from \"./styles\";\nimport { getError, getIsLogging } from \"../../reducers\";\nimport * as actions from \"../../actions/auth\";\nimport { validateEmail } from \"../../modules/validate\";\n\nvar Login = function Login(_ref) {\n  var Message = _ref.Message,\n      onSubmit = _ref.onSubmit;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      changeEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      changePassword = _useState4[1];\n\n  return React.createElement(View, {\n    style: styles.section,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.login,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    style: styles.user,\n    className: \"user\",\n    type: \"text\",\n    placeholder: \"email\",\n    value: email,\n    autoCompleteType: \"email\",\n    value: email,\n    keyboardType: 'email-address',\n    onChangeText: changeEmail,\n    onChange: function onChange(e) {\n      return changeEmail(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  }), React.createElement(TextInput, {\n    style: styles.password,\n    className: \"password\",\n    type: \"password\",\n    secureTextEntry: true,\n    placeholder: \"password\",\n    value: password,\n    onChangeText: changePassword,\n    onChange: function onChange(e) {\n      return changePassword(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    className: \"login_button\",\n    color: \"#540A08\",\n    title: 'LOGIN',\n    type: \"submit\",\n    onPress: function onPress() {\n      return onSubmit(email, password);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }))), React.createElement(Text, {\n    style: styles.errorText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, Message), React.createElement(View, {\n    style: styles.sectionText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, \"Scroll Down \\u2193\")));\n};\n\nexport default connect(function (state) {\n  return {\n    Message: getIsLogging(state) !== null ? getIsLogging(state) ? 'LOADING...' : getError(state) : undefined\n  };\n}, function (dispatch) {\n  return {\n    onSubmit: function onSubmit(email, password) {\n      if (email && password) {\n        if (validateEmail(email)) {\n          dispatch(actions.startLogin(email, password));\n        } else {\n          dispatch(actions.failLogin('WRITE A VALID EMAIL', 0));\n        }\n      } else if (!email) {\n        dispatch(actions.failLogin('EMAIL FIELD MUST NOT BE EMPTY', 0));\n      } else if (!password) {\n        dispatch(actions.failLogin('PASSWORD FIELD MUST NOT BE EMPTY', 0));\n      }\n    }\n  };\n})(Login);","map":{"version":3,"sources":["C:/Users/HP/Documents/GitHub/InsideMaps/src/components/Login/index.js"],"names":["React","useState","connect","styles","getError","getIsLogging","actions","validateEmail","Login","Message","onSubmit","email","changeEmail","password","changePassword","section","login","user","e","target","value","button","errorText","sectionText","text","state","undefined","dispatch","startLogin","failLogin"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { View, TextInput, Button, Text } from \"react-native\";\r\nimport styles from './styles'\r\nimport { getError, getIsLogging } from '../../reducers'\r\nimport * as actions from '../../actions/auth'\r\nimport { validateEmail } from  '../../modules/validate'\r\n\r\nconst Login = ({Message ,onSubmit}) => {\r\n    const [email,changeEmail] = useState('')\r\n    const [password,changePassword] = useState('')\r\n    return (\r\n        <View style={styles.section}>\r\n            <View style={styles.login}>\r\n                <TextInput\r\n                style={styles.user}\r\n                className=\"user\"\r\n                type=\"text\"\r\n                placeholder=\"email\"\r\n                value={email}\r\n                autoCompleteType='email'\r\n                value={email}\r\n                keyboardType={'email-address'}    \r\n                onChangeText={changeEmail}\r\n                onChange={e => changeEmail(e.target.value)}\r\n                />\r\n                <TextInput\r\n                    style={styles.password}\r\n                    className=\"password\"\r\n                    type=\"password\"\r\n                    secureTextEntry={true}\r\n                    placeholder=\"password\"\r\n                    value={password}\r\n                    onChangeText={changePassword}\r\n                    onChange={e=>changePassword(e.target.value)}\r\n                />\r\n                <View style={styles.button}>\r\n                    <Button className=\"login_button\" color='#540A08'  title={'LOGIN'} type=\"submit\" onPress={\r\n                        () => onSubmit(email,password)\r\n                    }/>\r\n                </View>\r\n                \r\n            </View>\r\n            <Text style={styles.errorText}>{Message}</Text>\r\n            <View style={styles.sectionText}>\r\n                <Text style={styles.text}>Scroll Down â†“</Text>\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        Message: (getIsLogging(state)!==null)?\r\n            ((getIsLogging(state))?\r\n                ('LOADING...'):\r\n                (getError(state))):\r\n            (undefined) \r\n    }),\r\n    dispatch => ({\r\n        onSubmit(email,password){\r\n            if(email && password){\r\n                if(validateEmail(email)){\r\n                    dispatch(actions.startLogin(email,password))\r\n                }\r\n                else{\r\n                    dispatch(actions.failLogin('WRITE A VALID EMAIL',0))\r\n                }\r\n                \r\n            }    \r\n            else if(!email){\r\n                dispatch(actions.failLogin('EMAIL FIELD MUST NOT BE EMPTY',0))\r\n            }\r\n            else if(!password){\r\n                dispatch(actions.failLogin('PASSWORD FIELD MUST NOT BE EMPTY',0))\r\n            }\r\n        }\r\n    })\r\n)(Login)\r\n\r\n"]},"metadata":{},"sourceType":"module"}
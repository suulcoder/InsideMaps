{"ast":null,"code":"import * as types from \"../types/map\";\nexport var startCreatingMap = function startCreatingMap(map) {\n  return {\n    type: types.CREATE_MAP_STARTED,\n    payload: map\n  };\n};\nexport var completeCreatingMap = function completeCreatingMap(oldId, map) {\n  return {\n    type: types.CREATE_MAP_COMPLETED,\n    payload: {\n      oldId: oldId,\n      map: map\n    }\n  };\n};\nexport var failCreatingMap = function failCreatingMap(oldId, error) {\n  return {\n    type: types.CREATE_MAP_FAILED,\n    payload: {\n      oldId: oldId,\n      error: error\n    }\n  };\n};\nexport var startFetchingMaps = function startFetchingMaps() {\n  return {\n    type: types.FETCH_MAP_STARTED\n  };\n};\nexport var completeFetchingMaps = function completeFetchingMaps(entities, order) {\n  return {\n    type: types.FETCH_MAP_COMPLETED,\n    payload: {\n      entities: entities,\n      order: order\n    }\n  };\n};\nexport var failFetchingMaps = function failFetchingMaps(error) {\n  return {\n    type: types.FETCH_MAP_FAILED,\n    payload: {\n      error: error\n    }\n  };\n};","map":{"version":3,"sources":["/home/roberto/Desktop/UVG 2020/INGENIERIA/InsideMaps/src/actions/map.js"],"names":["types","startCreatingMap","map","type","CREATE_MAP_STARTED","payload","completeCreatingMap","oldId","CREATE_MAP_COMPLETED","failCreatingMap","error","CREATE_MAP_FAILED","startFetchingMaps","FETCH_MAP_STARTED","completeFetchingMaps","entities","order","FETCH_MAP_COMPLETED","failFetchingMaps","FETCH_MAP_FAILED"],"mappings":"AAAA,OAAO,KAAKA,KAAZ;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,GAAG;AAAA,SAAK;AACtCC,IAAAA,IAAI,EAAEH,KAAK,CAACI,kBAD0B;AAEtCC,IAAAA,OAAO,EAAEH;AAF6B,GAAL;AAAA,CAA5B;AAKP,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAQL,GAAR;AAAA,SAAiB;AAClDC,IAAAA,IAAI,EAAEH,KAAK,CAACQ,oBADsC;AAElDH,IAAAA,OAAO,EAAE;AACPE,MAAAA,KAAK,EAALA,KADO;AAEPL,MAAAA,GAAG,EAAHA;AAFO;AAFyC,GAAjB;AAAA,CAA5B;AAQP,OAAO,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACF,KAAD,EAAQG,KAAR;AAAA,SAAmB;AAChDP,IAAAA,IAAI,EAAEH,KAAK,CAACW,iBADoC;AAEhDN,IAAAA,OAAO,EAAE;AACPE,MAAAA,KAAK,EAALA,KADO;AAEPG,MAAAA,KAAK,EAALA;AAFO;AAFuC,GAAnB;AAAA,CAAxB;AAQP,OAAO,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAO;AACtCT,IAAAA,IAAI,EAAEH,KAAK,CAACa;AAD0B,GAAP;AAAA,CAA1B;AAIP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,QAAD,EAAWC,KAAX;AAAA,SAAsB;AACxDb,IAAAA,IAAI,EAAEH,KAAK,CAACiB,mBAD4C;AAExDZ,IAAAA,OAAO,EAAE;AACPU,MAAAA,QAAQ,EAARA,QADO;AAEPC,MAAAA,KAAK,EAALA;AAFO;AAF+C,GAAtB;AAAA,CAA7B;AAQP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAR,KAAK;AAAA,SAAK;AACtCP,IAAAA,IAAI,EAAEH,KAAK,CAACmB,gBAD0B;AAEtCd,IAAAA,OAAO,EAAE;AACPK,MAAAA,KAAK,EAALA;AADO;AAF6B,GAAL;AAAA,CAA9B","sourcesContent":["import * as types from '../types/map';\n\nexport const startCreatingMap = map => ({ //map es un diccionario con todo lo que se debe agregar para crear un nuevo mapa\n  type: types.CREATE_MAP_STARTED,\n  payload: map,\n});\n\nexport const completeCreatingMap = (oldId, map) => ({ //igual este map es un dict y contiene un verdadero mapa (no es fachada)\n  type: types.CREATE_MAP_COMPLETED,\n  payload: {\n    oldId,\n    map,\n  }\n});\n\nexport const failCreatingMap = (oldId, error) => ({\n  type: types.CREATE_MAP_FAILED,\n  payload: {\n    oldId,\n    error,\n  },\n});\n\nexport const startFetchingMaps = () => ({\n  type: types.FETCH_MAP_STARTED,\n});\n\nexport const completeFetchingMaps = (entities, order) => ({\n  type: types.FETCH_MAP_COMPLETED,\n  payload: {\n    entities,\n    order\n  }\n});\n\nexport const failFetchingMaps = error => ({\n    type: types.FETCH_MAP_FAILED,\n    payload: {\n      error,\n    }\n});\n\n"]},"metadata":{},"sourceType":"module"}
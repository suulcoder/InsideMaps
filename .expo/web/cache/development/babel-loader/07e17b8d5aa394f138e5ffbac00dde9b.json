{"ast":null,"code":"import { combineReducers } from 'redux';\nimport * as types from \"../types/auth\";\n\nvar token = function token() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.AUTHENTICATION_STARTED:\n      {\n        return null;\n      }\n\n    case types.AUTHENTICATION_COMPLETED:\n      {\n        return action.payload.token;\n      }\n\n    case types.AUTHENTICATION_FAILED:\n      {\n        return null;\n      }\n  }\n\n  return state;\n};\n\nvar isAuthenticating = function isAuthenticating() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    form: false,\n    state: false\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.AUTHENTICATION_STARTED:\n      {\n        return true;\n      }\n\n    case types.AUTHENTICATION_COMPLETED:\n      {\n        return false;\n      }\n\n    case types.AUTHENTICATION_FAILED:\n      {\n        return false;\n      }\n  }\n\n  return state;\n};\n\nvar error = function error() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.AUTHENTICATION_STARTED:\n      {\n        return null;\n      }\n\n    case types.AUTHENTICATION_COMPLETED:\n      {\n        return null;\n      }\n\n    case types.AUTHENTICATION_FAILED:\n      {\n        return action.payload.error;\n      }\n  }\n\n  return state;\n};\n\nvar auth = combineReducers({\n  token: token,\n  isAuthenticating: isAuthenticating,\n  error: error\n});\nexport default auth;\nexport var getAuthToken = function getAuthToken(state) {\n  return state.token;\n};\nexport var getIsAuthenticating = function getIsAuthenticating(state) {\n  return state.isAuthenticating;\n};\nexport var getError = function getError(state) {\n  return state.error;\n};","map":{"version":3,"sources":["/home/thecoder/Documentos/UVG/Software/InsideMaps/src/reducers/auth.js"],"names":["combineReducers","types","token","state","action","type","AUTHENTICATION_STARTED","AUTHENTICATION_COMPLETED","payload","AUTHENTICATION_FAILED","isAuthenticating","form","error","auth","getAuthToken","getIsAuthenticating","getError"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,OAAO,KAAKC,KAAZ;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAA0B;AAAA,MAAzBC,KAAyB,uEAAjB,IAAiB;AAAA,MAAXC,MAAW;;AACtC,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKJ,KAAK,CAACK,sBAAX;AAAmC;AACjC,eAAO,IAAP;AACD;;AACD,SAAKL,KAAK,CAACM,wBAAX;AAAqC;AACnC,eAAOH,MAAM,CAACI,OAAP,CAAeN,KAAtB;AACD;;AACD,SAAKD,KAAK,CAACQ,qBAAX;AAAkC;AAChC,eAAO,IAAP;AACD;AAVH;;AAYA,SAAON,KAAP;AACD,CAdD;;AAgBA,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,GAA8C;AAAA,MAA7CP,KAA6C,uEAArC;AAACQ,IAAAA,IAAI,EAAC,KAAN;AAAYR,IAAAA,KAAK,EAAC;AAAlB,GAAqC;AAAA,MAAXC,MAAW;;AACrE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKJ,KAAK,CAACK,sBAAX;AAAmC;AACjC,eAAO,IAAP;AACD;;AACD,SAAKL,KAAK,CAACM,wBAAX;AAAqC;AACnC,eAAO,KAAP;AACD;;AACD,SAAKN,KAAK,CAACQ,qBAAX;AAAkC;AAChC,eAAO,KAAP;AACD;AAVH;;AAYA,SAAON,KAAP;AACD,CAdD;;AAgBA,IAAMS,KAAK,GAAG,SAARA,KAAQ,GAA0B;AAAA,MAAzBT,KAAyB,uEAAjB,IAAiB;AAAA,MAAXC,MAAW;;AACtC,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKJ,KAAK,CAACK,sBAAX;AAAmC;AACjC,eAAO,IAAP;AACD;;AACD,SAAKL,KAAK,CAACM,wBAAX;AAAqC;AACnC,eAAO,IAAP;AACD;;AACD,SAAKN,KAAK,CAACQ,qBAAX;AAAkC;AAChC,eAAOL,MAAM,CAACI,OAAP,CAAeI,KAAtB;AACD;AAVH;;AAYA,SAAOT,KAAP;AACD,CAdD;;AAgBA,IAAMU,IAAI,GAAGb,eAAe,CAAC;AAC3BE,EAAAA,KAAK,EAALA,KAD2B;AAE3BQ,EAAAA,gBAAgB,EAAhBA,gBAF2B;AAG3BE,EAAAA,KAAK,EAALA;AAH2B,CAAD,CAA5B;AAMA,eAAeC,IAAf;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAX,KAAK;AAAA,SAAIA,KAAK,CAACD,KAAV;AAAA,CAA1B;AACP,OAAO,IAAMa,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAZ,KAAK;AAAA,SAAIA,KAAK,CAACO,gBAAV;AAAA,CAAjC;AACP,OAAO,IAAMM,QAAQ,GAAG,SAAXA,QAAW,CAAAb,KAAK;AAAA,SAAIA,KAAK,CAACS,KAAV;AAAA,CAAtB","sourcesContent":["import { combineReducers } from 'redux';\n\nimport * as types from '../types/auth';\n\nconst token = (state = null, action) => {\n  switch (action.type) {\n\n    case types.AUTHENTICATION_STARTED: {\n      return null;\n    }\n    case types.AUTHENTICATION_COMPLETED: {\n      return action.payload.token;\n    }\n    case types.AUTHENTICATION_FAILED: {\n      return null;\n    }\n  }\n  return state;\n};\n\nconst isAuthenticating = (state = {form:false,state:false}, action) => { //Form: false for LoginForm, True for SignUpForm\n  switch (action.type) {\n\n    case types.AUTHENTICATION_STARTED: {\n      return true;\n    }\n    case types.AUTHENTICATION_COMPLETED: {\n      return false;\n    }\n    case types.AUTHENTICATION_FAILED: {\n      return false;\n    }\n  }\n  return state;\n};\n\nconst error = (state = null, action) => {\n  switch (action.type) {\n\n    case types.AUTHENTICATION_STARTED: {\n      return null;\n    }\n    case types.AUTHENTICATION_COMPLETED: {\n      return null;\n    }\n    case types.AUTHENTICATION_FAILED: {\n      return action.payload.error;\n    }\n  }\n  return state;\n};\n\nconst auth = combineReducers({\n  token,\n  isAuthenticating,\n  error\n});\n\nexport default auth;\n\nexport const getAuthToken = state => state.token;\nexport const getIsAuthenticating = state => state.isAuthenticating;\nexport const getError = state => state.error;"]},"metadata":{},"sourceType":"module"}
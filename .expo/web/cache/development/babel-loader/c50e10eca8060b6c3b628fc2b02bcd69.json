{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport { EventEmitter } from 'fbemitter';\nimport ExponentUpdates from \"./ExponentUpdates\";\nexport function reload() {\n  return _reload.apply(this, arguments);\n}\n\nfunction _reload() {\n  _reload = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return ExponentUpdates.reload();\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _reload.apply(this, arguments);\n}\n\nexport function reloadFromCache() {\n  return _reloadFromCache.apply(this, arguments);\n}\n\nfunction _reloadFromCache() {\n  _reloadFromCache = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return ExponentUpdates.reloadFromCache();\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _reloadFromCache.apply(this, arguments);\n}\n\nexport function checkForUpdateAsync() {\n  return _checkForUpdateAsync.apply(this, arguments);\n}\n\nfunction _checkForUpdateAsync() {\n  _checkForUpdateAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3() {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (ExponentUpdates.checkForUpdateAsync) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n\n          case 2:\n            _context3.next = 4;\n            return ExponentUpdates.checkForUpdateAsync();\n\n          case 4:\n            result = _context3.sent;\n\n            if (result) {\n              _context3.next = 7;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", {\n              isAvailable: false\n            });\n\n          case 7:\n            return _context3.abrupt(\"return\", {\n              isAvailable: true,\n              manifest: typeof result === 'string' ? JSON.parse(result) : result\n            });\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _checkForUpdateAsync.apply(this, arguments);\n}\n\nexport function fetchUpdateAsync() {\n  return _fetchUpdateAsync.apply(this, arguments);\n}\n\nfunction _fetchUpdateAsync() {\n  _fetchUpdateAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee4() {\n    var _ref,\n        eventListener,\n        subscription,\n        result,\n        _args4 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _ref = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {}, eventListener = _ref.eventListener;\n\n            if (ExponentUpdates.fetchUpdateAsync) {\n              _context4.next = 3;\n              break;\n            }\n\n            throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n\n          case 3:\n            if (eventListener && typeof eventListener === 'function') {\n              subscription = addListener(eventListener);\n            }\n\n            _context4.prev = 4;\n            _context4.next = 7;\n            return ExponentUpdates.fetchUpdateAsync();\n\n          case 7:\n            result = _context4.sent;\n\n          case 8:\n            _context4.prev = 8;\n            subscription && subscription.remove();\n            return _context4.finish(8);\n\n          case 11:\n            if (result) {\n              _context4.next = 13;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", {\n              isNew: false\n            });\n\n          case 13:\n            return _context4.abrupt(\"return\", {\n              isNew: true,\n              manifest: typeof result === 'string' ? JSON.parse(result) : result\n            });\n\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[4,, 8, 11]]);\n  }));\n  return _fetchUpdateAsync.apply(this, arguments);\n}\n\nexport function clearUpdateCacheExperimentalAsync(_x) {\n  return _clearUpdateCacheExperimentalAsync.apply(this, arguments);\n}\n\nfunction _clearUpdateCacheExperimentalAsync() {\n  _clearUpdateCacheExperimentalAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee5(abiVersion) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (ExponentUpdates.clearUpdateCacheAsync) {\n              _context5.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n\n          case 2:\n            return _context5.abrupt(\"return\", ExponentUpdates.clearUpdateCacheAsync(abiVersion));\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _clearUpdateCacheExperimentalAsync.apply(this, arguments);\n}\n\nvar _emitter;\n\nfunction _getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n\n  return _emitter;\n}\n\nfunction _emitEvent(params) {\n  var newParams = params;\n\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(\"EventEmitter must be initialized to use from its listener\");\n  }\n\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener) {\n  var emitter = _getEmitter();\n\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\nexport var EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error'\n};","map":{"version":3,"sources":["../../src/Updates/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import { RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport ExponentUpdates from './ExponentUpdates';\n\ntype Manifest = typeof Constants.manifest;\n\ntype UpdateCheckResult = { isAvailable: false } | { isAvailable: true; manifest: Manifest };\n\ntype UpdateFetchResult = { isNew: false } | { isNew: true; manifest: Manifest };\n\ntype UpdateEvent =\n  | { type: 'downloadStart' | 'downloadProgress' | 'noUpdateAvailable' }\n  | { type: 'downloadFinished'; manifest: Manifest }\n  | { type: 'error'; message: string };\n\ntype UpdateEventListener = (event: UpdateEvent) => void;\n\nexport async function reload(): Promise<void> {\n  await ExponentUpdates.reload();\n}\n\nexport async function reloadFromCache(): Promise<void> {\n  await ExponentUpdates.reloadFromCache();\n}\n\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExponentUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  const result = await ExponentUpdates.checkForUpdateAsync();\n  if (!result) {\n    return { isAvailable: false };\n  }\n\n  return {\n    isAvailable: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function fetchUpdateAsync({\n  eventListener,\n}: { eventListener?: UpdateEventListener } = {}): Promise<UpdateFetchResult> {\n  if (!ExponentUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  let subscription;\n  let result;\n  if (eventListener && typeof eventListener === 'function') {\n    subscription = addListener(eventListener);\n  }\n  try {\n    result = await ExponentUpdates.fetchUpdateAsync();\n  } finally {\n    subscription && subscription.remove();\n  }\n\n  if (!result) {\n    return { isNew: false };\n  }\n\n  return {\n    isNew: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function clearUpdateCacheExperimentalAsync(abiVersion: string): Promise<void> {\n  if (!ExponentUpdates.clearUpdateCacheAsync) {\n    throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n  }\n  return ExponentUpdates.clearUpdateCacheAsync(abiVersion);\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener: Function): EventSubscription {\n  let emitter = _getEmitter();\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\n\nexport const EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error',\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
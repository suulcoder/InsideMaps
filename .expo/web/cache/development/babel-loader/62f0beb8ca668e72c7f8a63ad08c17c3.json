{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/thecoder/Documentos/UVG/Software/InsideMaps/src/components/spinner/index.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React from \"react\";\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/PulseLoader\";\nvar override = process.env.NODE_ENV === \"production\" ? {\n  name: \"1emvaom-override\",\n  styles: \"display:block;margin:0 auto;border-color:red;;label:override;\"\n} : {\n  name: \"1emvaom-override\",\n  styles: \"display:block;margin:0 auto;border-color:red;;label:override;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWNvZGVyL0RvY3VtZW50b3MvVVZHL1NvZnR3YXJlL0luc2lkZU1hcHMvc3JjL2NvbXBvbmVudHMvc3Bpbm5lci9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLb0IiLCJmaWxlIjoiL2hvbWUvdGhlY29kZXIvRG9jdW1lbnRvcy9VVkcvU29mdHdhcmUvSW5zaWRlTWFwcy9zcmMvY29tcG9uZW50cy9zcGlubmVyL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcbmltcG9ydCBDbGlwTG9hZGVyIGZyb20gXCJyZWFjdC1zcGlubmVycy9QdWxzZUxvYWRlclwiO1xuIFxuLy8gQ2FuIGJlIGEgc3RyaW5nIGFzIHdlbGwuIE5lZWQgdG8gZW5zdXJlIGVhY2gga2V5LXZhbHVlIHBhaXIgZW5kcyB3aXRoIDtcbmNvbnN0IG92ZXJyaWRlID0gY3NzYFxuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luOiAwIGF1dG87XG4gIGJvcmRlci1jb2xvcjogcmVkO1xuYDtcbiBcbmNsYXNzIFNwaW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9hZGluZzogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9hZGluZzogIXRoaXMuc3RhdGUubG9hZGluZ1xuICAgICAgfSk7XG4gICAgfSwgMzAwMDApO1xuICB9XG4gXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJza2V3LWxvYWRlclwiPlxuICAgICAgICA8Q2xpcExvYWRlclxuICAgICAgICAgIGNzcz17b3ZlcnJpZGV9XG4gICAgICAgICAgc2l6ZT17MTB9XG4gICAgICAgICAgY29sb3I9e1wiIzU0MEEwOFwifVxuICAgICAgICAgIGxvYWRpbmc9e3RoaXMuc3RhdGUubG9hZGluZ31cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3Bpbm5lcjtcblxuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar Spinner = function (_React$Component) {\n  _inherits(Spinner, _React$Component);\n\n  var _super = _createSuper(Spinner);\n\n  function Spinner(props) {\n    var _this;\n\n    _classCallCheck(this, Spinner);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(Spinner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setInterval(function () {\n        _this2.setState({\n          loading: !_this2.state.loading\n        });\n      }, 30000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"skew-loader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }\n      }, React.createElement(ClipLoader, {\n        css: override,\n        size: 10,\n        color: \"#540A08\",\n        loading: this.state.loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Spinner;\n}(React.Component);\n\nexport default Spinner;","map":{"version":3,"sources":["/home/thecoder/Documentos/UVG/Software/InsideMaps/src/components/spinner/index.js"],"names":["React","css","ClipLoader","override","Spinner","props","state","loading","setInterval","setState","Component"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AAGA,IAAMC,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;;IAMMC,O;;;;;AACJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAFiB;AAKlB;;;;wCAEmB;AAAA;;AAClBC,MAAAA,WAAW,CAAC,YAAM;AAChB,QAAA,MAAI,CAACC,QAAL,CAAc;AACZF,UAAAA,OAAO,EAAE,CAAC,MAAI,CAACD,KAAL,CAAWC;AADT,SAAd;AAGD,OAJU,EAIR,KAJQ,CAAX;AAKD;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AACE,QAAA,GAAG,EAAEJ,QADP;AAEE,QAAA,IAAI,EAAE,EAFR;AAGE,QAAA,KAAK,EAAE,SAHT;AAIE,QAAA,OAAO,EAAE,KAAKG,KAAL,CAAWC,OAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAUD;;;;EA3BmBP,KAAK,CAACU,S;;AA8B5B,eAAeN,OAAf","sourcesContent":["import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/PulseLoader\";\n \n// Can be a string as well. Need to ensure each key-value pair ends with ;\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n \nclass Spinner extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        loading: !this.state.loading\n      });\n    }, 30000);\n  }\n \n  render() {\n    return (\n      <div className=\"skew-loader\">\n        <ClipLoader\n          css={override}\n          size={10}\n          color={\"#540A08\"}\n          loading={this.state.loading}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Spinner;\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import*as types from\"../types/map\";export var startCreatingMap=function startCreatingMap(map){return{type:types.CREATE_MAP_STARTED,payload:map};};export var completeCreatingMap=function completeCreatingMap(oldId,map){return{type:types.CREATE_MAP_COMPLETED,payload:{oldId:oldId,map:map}};};export var failCreatingMap=function failCreatingMap(oldId,error){return{type:types.CREATE_MAP_FAILED,payload:{oldId:oldId,error:error}};};export var startFetchingMaps=function startFetchingMaps(){return{type:types.FETCH_MAP_STARTED};};export var completeFetchingMaps=function completeFetchingMaps(entities,order){return{type:types.FETCH_MAP_COMPLETED,payload:{entities:entities,order:order}};};export var failFetchingMaps=function failFetchingMaps(error){return{type:types.FETCH_MAP_FAILED,payload:{error:error}};};","map":{"version":3,"sources":["/home/thecoder/Documentos/UVG/Software/InsideMaps/src/actions/map.js"],"names":["types","startCreatingMap","map","type","CREATE_MAP_STARTED","payload","completeCreatingMap","oldId","CREATE_MAP_COMPLETED","failCreatingMap","error","CREATE_MAP_FAILED","startFetchingMaps","FETCH_MAP_STARTED","completeFetchingMaps","entities","order","FETCH_MAP_COMPLETED","failFetchingMaps","FETCH_MAP_FAILED"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,KAAZ,oBAEA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAAC,GAAG,QAAK,CACtCC,IAAI,CAAEH,KAAK,CAACI,kBAD0B,CAEtCC,OAAO,CAAEH,GAF6B,CAAL,EAA5B,CAKP,MAAO,IAAMI,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,KAAD,CAAQL,GAAR,QAAiB,CAClDC,IAAI,CAAEH,KAAK,CAACQ,oBADsC,CAElDH,OAAO,CAAE,CACPE,KAAK,CAALA,KADO,CAEPL,GAAG,CAAHA,GAFO,CAFyC,CAAjB,EAA5B,CAQP,MAAO,IAAMO,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACF,KAAD,CAAQG,KAAR,QAAmB,CAChDP,IAAI,CAAEH,KAAK,CAACW,iBADoC,CAEhDN,OAAO,CAAE,CACPE,KAAK,CAALA,KADO,CAEPG,KAAK,CAALA,KAFO,CAFuC,CAAnB,EAAxB,CAQP,MAAO,IAAME,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,SAAO,CACtCT,IAAI,CAAEH,KAAK,CAACa,iBAD0B,CAAP,EAA1B,CAIP,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,QAAD,CAAWC,KAAX,QAAsB,CACxDb,IAAI,CAAEH,KAAK,CAACiB,mBAD4C,CAExDZ,OAAO,CAAE,CACPU,QAAQ,CAARA,QADO,CAEPC,KAAK,CAALA,KAFO,CAF+C,CAAtB,EAA7B,CAQP,MAAO,IAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAAR,KAAK,QAAK,CACtCP,IAAI,CAAEH,KAAK,CAACmB,gBAD0B,CAEtCd,OAAO,CAAE,CACPK,KAAK,CAALA,KADO,CAF6B,CAAL,EAA9B","sourcesContent":["import * as types from '../types/map';\n\nexport const startCreatingMap = map => ({ //map es un diccionario con todo lo que se debe agregar para crear un nuevo mapa\n  type: types.CREATE_MAP_STARTED,\n  payload: map,\n});\n\nexport const completeCreatingMap = (oldId, map) => ({ //igual este map es un dict y contiene un verdadero mapa (no es fachada)\n  type: types.CREATE_MAP_COMPLETED,\n  payload: {\n    oldId,\n    map,\n  }\n});\n\nexport const failCreatingMap = (oldId, error) => ({\n  type: types.CREATE_MAP_FAILED,\n  payload: {\n    oldId,\n    error,\n  },\n});\n\nexport const startFetchingMaps = () => ({\n  type: types.FETCH_MAP_STARTED,\n});\n\nexport const completeFetchingMaps = (entities, order) => ({\n  type: types.FETCH_MAP_COMPLETED,\n  payload: {\n    entities,\n    order\n  }\n});\n\nexport const failFetchingMaps = error => ({\n    type: types.FETCH_MAP_FAILED,\n    payload: {\n      error,\n    }\n});\n\n"]},"metadata":{},"sourceType":"module"}
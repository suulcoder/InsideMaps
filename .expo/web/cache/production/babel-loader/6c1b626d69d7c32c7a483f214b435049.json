{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";var _marked=_regeneratorRuntime.mark(createMap),_marked2=_regeneratorRuntime.mark(watchCreateMap);import{call,takeEvery,put,select}from'redux-saga/effects';import*as actions from\"../actions/map\";import*as types from\"../types/map\";import*as selectors from\"../reducers\";var API_BASE_URL='https://inside-maps-api.herokuapp.com/api/v1/auth';function createMap(action){var map,oldId,isAuth,token,response,_yield$response$json,newMap;return _regeneratorRuntime.wrap(function createMap$(_context){while(1){switch(_context.prev=_context.next){case 0:map=action.payload.map;oldId=map.id;_context.prev=2;_context.next=5;return select(selectors.isAuthenticated);case 5:isAuth=_context.sent;if(!isAuth){_context.next=26;break;}_context.next=9;return select(selectors.getAuthToken);case 9:token=_context.sent;_context.next=12;return call(fetch,API_BASE_URL,{method:'POST',body:action.payload,headers:{'Content-Type':'application/json','Authorization':\"JWT \".concat(token)}});case 12:response=_context.sent;if(!(response.status===200)){_context.next=23;break;}_context.next=16;return response.json();case 16:_yield$response$json=_context.sent;newMap=_yield$response$json.newMap;_context.next=20;return put(actions.completeCreatingMap(oldId,newMap));case 20:console.log(\"Se creo un nuevo mapa exitosamente!\",newMap);_context.next=24;break;case 23:console.log(\"Error en la respuesta!\");case 24:_context.next=27;break;case 26:console.log('Error de autenticación');case 27:_context.next=34;break;case 29:_context.prev=29;_context.t0=_context[\"catch\"](2);console.log(_context.t0);_context.next=34;return put(actions.failCreatingMap(_context.t0));case 34:case\"end\":return _context.stop();}}},_marked,null,[[2,29]]);}export function watchCreateMap(){return _regeneratorRuntime.wrap(function watchCreateMap$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(types.CREATE_MAP_STARTED,createMap);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["/home/thecoder/Documentos/UVG/Software/InsideMaps/src/sagas/map.js"],"names":["createMap","watchCreateMap","call","takeEvery","put","select","actions","types","selectors","API_BASE_URL","action","map","payload","oldId","id","isAuthenticated","isAuth","getAuthToken","token","fetch","method","body","headers","response","status","json","newMap","completeCreatingMap","console","log","failCreatingMap","CREATE_MAP_STARTED"],"mappings":"iGAcUA,S,oCAyCOC,c,EAvDjB,OACEC,IADF,CAEEC,SAFF,CAGEC,GAHF,CAIEC,MAJF,KAKO,oBALP,CAOA,MAAO,GAAKC,CAAAA,OAAZ,sBACA,MAAO,GAAKC,CAAAA,KAAZ,oBACA,MAAO,GAAKC,CAAAA,SAAZ,mBAEA,GAAMC,CAAAA,YAAY,CAAG,mDAArB,CAGA,QAAUT,CAAAA,SAAV,CAAoBU,MAApB,oLACUC,GADV,CACkBD,MAAM,CAACE,OADzB,CACUD,GADV,CAEQE,KAFR,CAEgBF,GAAG,CAACG,EAFpB,iCAImB,MAAMT,CAAAA,MAAM,CAACG,SAAS,CAACO,eAAX,CAAZ,CAJnB,OAIUC,MAJV,mBAMOA,MANP,0CAQoB,MAAMX,CAAAA,MAAM,CAACG,SAAS,CAACS,YAAX,CAAZ,CARpB,OAQYC,KARZ,gCAUuB,MAAMhB,CAAAA,IAAI,CACzBiB,KADyB,CAEzBV,YAFyB,CAGzB,CACEW,MAAM,CAAE,MADV,CAEEC,IAAI,CAAEX,MAAM,CAACE,OAFf,CAGEU,OAAO,CAAE,CACP,eAAgB,kBADT,CAEP,8BAAwBJ,KAAxB,CAFO,CAHX,CAHyB,CAAV,CAVvB,QAUYK,QAVZ,oBAuBSA,QAAQ,CAACC,MAAT,GAAoB,GAvB7B,4CAwB2B,MAAMD,CAAAA,QAAQ,CAACE,IAAT,EAAN,CAxB3B,2CAwBgBC,MAxBhB,sBAwBgBA,MAxBhB,kBAyBQ,MAAMtB,CAAAA,GAAG,CAACE,OAAO,CAACqB,mBAAR,CAA4Bd,KAA5B,CAAmCa,MAAnC,CAAD,CAAT,CAzBR,QA0BQE,OAAO,CAACC,GAAR,CAAY,qCAAZ,CAAmDH,MAAnD,EA1BR,+BA4BQE,OAAO,CAACC,GAAR,CAAY,wBAAZ,EA5BR,uCAgCMD,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAhCN,yFAoCID,OAAO,CAACC,GAAR,cApCJ,iBAqCI,MAAMzB,CAAAA,GAAG,CAACE,OAAO,CAACwB,eAAR,aAAD,CAAT,CArCJ,qEAyCA,MAAO,SAAU7B,CAAAA,cAAV,8IACL,MAAME,CAAAA,SAAS,CACbI,KAAK,CAACwB,kBADO,CAEb/B,SAFa,CAAf,CADK","sourcesContent":["import {\n  call,\n  takeEvery,\n  put,\n  select,\n} from 'redux-saga/effects';\n\nimport * as actions from '../actions/map';\nimport * as types from '../types/map';\nimport * as selectors from '../reducers';\n\nconst API_BASE_URL = 'https://inside-maps-api.herokuapp.com/api/v1/auth';\n\n\nfunction* createMap(action) {\n  const { map } = action.payload;\n  const oldId = map.id;\n  try {\n    const isAuth = yield select(selectors.isAuthenticated)\n\n    if(isAuth){\n\n      const token = yield select(selectors.getAuthToken);\n\n      const response = yield call(\n        fetch,\n        API_BASE_URL,\n        {\n          method: 'POST',\n          body: action.payload,\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `JWT ${token}`,\n          },\n        }\n      );\n\n      if(response.status === 200){\n        const { newMap } = yield response.json();\n        yield put(actions.completeCreatingMap(oldId, newMap));\n        console.log(\"Se creo un nuevo mapa exitosamente!\", newMap); \n      } else {\n        console.log(\"Error en la respuesta!\");\n      }\n\n    } else {\n      console.log('Error de autenticación');\n    }\n\n  } catch(error) {\n    console.log(error);\n    yield put(actions.failCreatingMap(error));\n  }\n}\n\nexport function* watchCreateMap() {\n  yield takeEvery(\n    types.CREATE_MAP_STARTED,\n    createMap,\n  );\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState}from'react';import{connect}from'react-redux';import View from\"react-native-web/dist/exports/View\";import TextInput from\"react-native-web/dist/exports/TextInput\";import Button from\"react-native-web/dist/exports/Button\";import Text from\"react-native-web/dist/exports/Text\";import styles from\"./styles\";import{getError,getIsLogging,getIsSigning}from\"../../reducers\";import*as actions from\"../../actions/auth\";import{validateEmail}from\"../../modules/validate\";import Spinner from\"../spinner\";var Login=function Login(_ref){var _React$createElement;var Message=_ref.Message,onSubmit=_ref.onSubmit,loginSatus=_ref.loginSatus;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),email=_useState2[0],changeEmail=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),password=_useState4[0],changePassword=_useState4[1];return React.createElement(View,{style:styles.section},React.createElement(View,{style:styles.login},React.createElement(TextInput,(_React$createElement={style:styles.user,className:\"user\",type:\"text\",placeholder:\"email\",value:email},_defineProperty(_React$createElement,\"value\",email),_defineProperty(_React$createElement,\"keyboardType\",'email-address'),_defineProperty(_React$createElement,\"onChangeText\",changeEmail),_defineProperty(_React$createElement,\"onChange\",function onChange(e){return changeEmail(e.target.value);}),_React$createElement)),React.createElement(TextInput,{style:styles.password,className:\"password\",type:\"password\",secureTextEntry:true,placeholder:\"password\",value:password,onChangeText:changePassword,onChange:function onChange(e){return changePassword(e.target.value);}}),loginSatus?React.createElement(Spinner,null):React.createElement(View,{style:styles.button},React.createElement(Button,{className:\"login_button\",color:\"#540A08\",title:'LOGIN',type:\"submit\",onPress:function onPress(){return onSubmit(email,password);}}))),React.createElement(Text,{style:styles.errorText},Message),React.createElement(View,{style:styles.sectionText},React.createElement(Text,{style:styles.text},\"Scroll Down \\u2193\")));};export default connect(function(state){return{Message:getIsLogging(state)!==null?getIsLogging(state)?'LOADING...':getError(state):undefined,loginSatus:getIsLogging(state)};},function(dispatch){return{onSubmit:function onSubmit(email,password){if(email&&password){if(validateEmail(email)){dispatch(actions.startLogin(email,password));}else{dispatch(actions.failLogin('WRITE A VALID EMAIL',0));}}else if(!email){dispatch(actions.failLogin('EMAIL FIELD MUST NOT BE EMPTY',0));}else if(!password){dispatch(actions.failLogin('PASSWORD FIELD MUST NOT BE EMPTY',0));}}};})(Login);","map":{"version":3,"sources":["/home/thecoder/Documentos/UVG/Software/InsideMaps/src/components/Login/index.js"],"names":["React","useState","connect","styles","getError","getIsLogging","getIsSigning","actions","validateEmail","Spinner","Login","Message","onSubmit","loginSatus","email","changeEmail","password","changePassword","section","login","user","e","target","value","button","errorText","sectionText","text","state","undefined","dispatch","startLogin","failLogin"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { connect } from 'react-redux';\nimport { View, TextInput, Button, Text } from \"react-native\";\nimport styles from './styles'\nimport { getError, getIsLogging, getIsSigning } from '../../reducers'\nimport * as actions from '../../actions/auth'\nimport { validateEmail } from  '../../modules/validate'\nimport  Spinner  from '../spinner';\n\nconst Login = ({Message ,onSubmit, loginSatus}) => {\n    const [email,changeEmail] = useState('')\n    const [password,changePassword] = useState('')\n    return (\n        <View style={styles.section}>\n            <View style={styles.login}>\n                <TextInput\n                style={styles.user}\n                className=\"user\"\n                type=\"text\"\n                placeholder=\"email\"\n                value={email}\n                value={email}\n                keyboardType={'email-address'}    \n                onChangeText={changeEmail}\n                onChange={e => changeEmail(e.target.value)}\n                />\n                <TextInput\n                    style={styles.password}\n                    className=\"password\"\n                    type=\"password\"\n                    secureTextEntry={true}\n                    placeholder=\"password\"\n                    value={password}\n                    onChangeText={changePassword}\n                    onChange={e=>changePassword(e.target.value)}\n                />\n                   { loginSatus ? <Spinner />:\n                    \n                    <View style={styles.button}>\n                        <Button className=\"login_button\" color='#540A08'  title={'LOGIN'} type=\"submit\" onPress={\n                            () => onSubmit(email,password)\n                        }/>\n                    </View>\n                }\n            </View>\n            <Text style={styles.errorText}>{Message}</Text>\n            <View style={styles.sectionText}>\n                <Text style={styles.text}>Scroll Down â†“</Text>\n            </View>\n        </View>\n    )\n}\n\nexport default connect(\n    state => ({\n        Message: (getIsLogging(state)!==null)?\n            ((getIsLogging(state))?\n                ('LOADING...'):\n                (getError(state))):\n            (undefined) ,\n        loginSatus: getIsLogging(state)\n    }),\n    dispatch => ({\n        onSubmit(email,password){\n            if(email && password){\n                if(validateEmail(email)){\n                    dispatch(actions.startLogin(email,password))\n                }\n                else{\n                    dispatch(actions.failLogin('WRITE A VALID EMAIL',0))\n                }\n                \n            }    \n            else if(!email){\n                dispatch(actions.failLogin('EMAIL FIELD MUST NOT BE EMPTY',0))\n            }\n            else if(!password){\n                dispatch(actions.failLogin('PASSWORD FIELD MUST NOT BE EMPTY',0))\n            }\n        }\n    })\n)(Login)\n\n"]},"metadata":{},"sourceType":"module"}